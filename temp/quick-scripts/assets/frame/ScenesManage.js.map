{"version":3,"sources":["ScenesManage.ts"],"names":[],"mappings":";;;;;AAAA,4DAAkD;AAClD,oDAAiD;AAE3C,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AACnC,IAAA,+CAAa,EAAC,uCAAS,CAAS;AAChC,IAAA,8CAAY,EAAC,gCAAK,CAAM;AAO/B;IAA0C,gCAAY;IAAtD;;IAwBA,CAAC;qBAxBoB,YAAY;IAE7B,iCAAU,GAAV,UAAW,UAAkB,EAAE,IAAY,EAAE,QAAoB;IACjE,CAAC;IAMD,sBAAkB,wBAAQ;aAA1B;YAEI,IAAG,CAAC,IAAI,CAAC,SAAS,EAClB;gBACI,IAAI,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBACxC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,cAAY,CAAC,CAAC;gBACjD,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;aACpC;YACD,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;;;OAAA;IACD,4BAAK,GAAL;QACI,iBAAM,KAAK,WAAE,CAAC;IAClB,CAAC;;IAhBD,wBAAwB;IAExB,eAAe;IACA,sBAAS,GAAgB,IAAI,CAAC;IAN7C;QADC,SAAS;kDAET;IAHgB,YAAY;QAFhC,aAAa;QACb,OAAO;OACa,YAAY,CAwBhC;IAAD,mBAAC;CAxBD,AAwBC,CAxByC,YAAY,GAwBrD;kBAxBoB,YAAY;AAyBjC;IAAkC,+BAAK;IAAvC;;IAcA,CAAC;IAZG,gCAAU,GAAV,UAAW,UAAkB,EAAE,IAAY,EAAE,QAAoB;IAEjE,CAAC;IACD,sBAAI,gCAAO;aAAX;YAEI,OAAqB,iBAAM,OAAO,CAAC;QACvC,CAAC;aACD,UAAY,GAAgB;YAExB,iBAAM,OAAO,GAAG,GAAG,CAAC;QACxB,CAAC;;;OAJA;IAML,kBAAC;AAAD,CAdA,AAcC,CAdiC,KAAK,GActC;AAda,kCAAW","file":"","sourceRoot":"..\\..\\..\\..\\assets\\frame","sourcesContent":["import { MSM } from \"./StateMachine/StateMachine\";\r\nimport { MSMDsc } from \"./StateMachine/StateDec\";\r\n\r\nconst {ccclass, property} = cc._decorator;\r\nconst {mStateMachine,mSyncFunc}=MSMDsc;\r\nconst {StateMachine,State}=MSM;\r\nexport interface IScenesManage\r\n{\r\n    loadScenes(scenesName:string,time:number,callback?:()=>void);\r\n}\r\n@mStateMachine\r\n@ccclass\r\nexport default class ScenesManage extends StateMachine implements IScenesManage {\r\n    @mSyncFunc\r\n    loadScenes(scenesName: string, time: number, callback: () => void) {\r\n    }\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n    private static _instance:ScenesManage = null;\r\n    public static get Instance():ScenesManage\r\n    {\r\n        if(!this._instance)\r\n        {\r\n            var node = new cc.Node(\"ScenesManange\");\r\n            this._instance = node.addComponent(ScenesManage);\r\n            cc.game.addPersistRootNode(node);\r\n        }\r\n        return this._instance;\r\n    }\r\n    start () {\r\n        super.start();\r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\nexport class  ScenesState extends State implements IScenesManage\r\n{\r\n    loadScenes(scenesName: string, time: number, callback: () => void) {\r\n\r\n    }\r\n    get context():ScenesManage\r\n    {\r\n        return <ScenesManage>super.context;\r\n    }\r\n    set context(ctx:ScenesManage)\r\n    {\r\n        super.context = ctx;\r\n    }\r\n\r\n}\r\n"]}