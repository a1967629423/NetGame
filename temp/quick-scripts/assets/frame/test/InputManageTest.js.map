{"version":3,"sources":["InputManageTest.ts"],"names":[],"mappings":";;;;;AAAA,8CAA8C;AAG9C,oBAAoB;AACpB,kFAAkF;AAClF,yFAAyF;AACzF,mBAAmB;AACnB,4FAA4F;AAC5F,mGAAmG;AACnG,8BAA8B;AAC9B,4FAA4F;AAC5F,mGAAmG;AAE7F,IAAA,kBAAmC,EAAlC,oBAAO,EAAE,sBAAQ,CAAkB;AACnC,IAAA,4CAAW,CAAM;AAExB;IAA6C,mCAAY;IADzD;QAAA,qEA+BC;QApBG,WAAK,GAAG,EAAE,CAAC,EAAE,EAAE,CAAA;;QAmBf,iBAAiB;IACrB,CAAC;IA7BG,oCAAU,GAAV,UAAW,UAAoB;IAC/B,CAAC;IACD,kCAAQ,GAAR,UAAS,UAAoB;IAC7B,CAAC;IACD,qCAAW,GAAX,UAAY,UAAoB;IAChC,CAAC;IACD,+BAAK,GAAL,UAAM,UAAmB;QACrB,wCAAwC;IAC5C,CAAC;IAED,+BAAK,GAAL;QAAA,iBAgBC;QAfG,IAAG,QAAQ,EACX;YAEI,IAAI,SAAS,GAAG,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YAC9C,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YACzB,4DAA4D;YAC5D,SAAS,CAAC,SAAS,CAAC,UAAC,KAAa,EAAC,QAAyB;gBACxD,IAAI,SAAS,GAAG,KAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAI,CAAC,wBAAwB,CAAC,KAAK,EAAC,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC7F,IAAG,SAAS,CAAC,CAAC,IAAE,CAAC,EAAE,IAAE,SAAS,CAAC,CAAC,IAAE,CAAC,EAAE,IAAE,SAAS,CAAC,CAAC,GAAC,GAAG,IAAE,SAAS,CAAC,CAAC,GAAC,GAAG,EACvE;oBACI,OAAO,IAAI,CAAA;iBACd;gBACD,OAAO,KAAK,CAAA;YAChB,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IA3BgB,eAAe;QADnC,OAAO;OACa,eAAe,CA8BnC;IAAD,sBAAC;CA9BD,AA8BC,CA9B4C,EAAE,CAAC,SAAS,GA8BxD;kBA9BoB,eAAe","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\frame\\test","sourcesContent":["import { IPSM, IInput } from \"../InputManage\";\r\n\r\n\r\n// Learn TypeScript:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/typescript.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html\r\n// Learn Attribute:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html\r\n// Learn life-cycle callbacks:\r\n//  - [Chinese] https://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\r\n//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html\r\n\r\nconst {ccclass, property} = cc._decorator;\r\nconst {InputManage}=IPSM\r\n@ccclass\r\nexport default class InputManageTest extends cc.Component implements IInput {\r\n    touchStart(touchEvent: cc.Touch) {\r\n    }\r\n    touchEnd(touchEvent: cc.Touch) {\r\n    }\r\n    touchCancel(touchEvent: cc.Touch) {\r\n    }\r\n    touch(touchEvent:cc.Touch) {\r\n        //console.log(touchEvent.getLocation());\r\n    }\r\n    vec2b = cc.v2()\r\n    start () {\r\n        if(CC_DEBUG)\r\n        {\r\n            \r\n            var thisinput = InputManage.getInstance(this);\r\n            thisinput.addInput(this);\r\n            //var play = this.getComponent(dragonBones.ArmatureDisplay);\r\n            thisinput.onHitTest((point:cc.Vec2,listener:cc.TouchOneByOne)=>{\r\n                var testpoint = this.node.convertToNodeSpace(IPSM.ConvertInputPointToWorld(point,this.node));\r\n                if(testpoint.x>=-50&&testpoint.y>=-50&&testpoint.x<150&&testpoint.y<150)\r\n                {\r\n                    return true\r\n                }\r\n                return false\r\n            })\r\n        }  \r\n    }\r\n\r\n    // update (dt) {}\r\n}\r\n"]}