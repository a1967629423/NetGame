{"version":3,"sources":["..\\..\\..\\..\\assets\\Material/assets\\Material\\ShaderMaterial.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\assets\\Material","sourcesContent":["type Pass = cc.renderer.renderEngine.renderer.Pass;\r\ntype Technique = cc.renderer.renderEngine.renderer.Technique;\r\ntype Effect = cc.renderer.renderEngine.renderer.Effect\r\nconst Pass = cc.renderer.renderEngine.renderer.Pass;\r\nconst Technique = cc.renderer.renderEngine.renderer.Technique;\r\nconst Effect = cc.renderer.renderEngine.renderer.Effect\r\nconst renderer = cc.renderer.renderEngine.renderer;\r\nconst Material = cc.renderer.renderEngine.Material\r\nconst gfx = cc.renderer.renderEngine.gfx;\r\nexport class ShaderMaterial extends Material {\r\n    protected _pass: Pass\r\n    protected _mainTech: Technique\r\n    protected _effect: Effect\r\n    protected _texture;\r\n    protected _texIds;\r\n    get effect(): Effect {\r\n        return this._effect;\r\n    }\r\n    set effect(v) {\r\n        this._effect = v;\r\n    }\r\n\r\n    protected _color = { r: 1.0, g: 1.0, b: 1.0, a: 1.0 };\r\n    protected _passName:string;\r\n    constructor(passName:string,vert?: string, frag?: string, defines?: any[]) {\r\n        super(false);\r\n        this._passName = passName;\r\n        if(vert&&frag&&defines)\r\n        cc.renderer._forward._programLib.define(passName,vert,frag,defines);\r\n        this.__init();\r\n    }\r\n    __init()\r\n    {\r\n        this._pass = new Pass(this._passName);\r\n        this._pass.setDepth(false, false);\r\n        this._pass.setCullMode(gfx.CULL_NONE);\r\n        this._pass.setBlend(\r\n            gfx.BLEND_FUNC_ADD,\r\n            gfx.BLEND_SRC_ALPHA,\r\n            gfx.BLEND_ONE_MINUS_SRC_ALPHA,            \r\n            gfx.BLEND_FUNC_ADD,\r\n            gfx.BLEND_SRC_ALPHA,\r\n            gfx.BLEND_ONE_MINUS_SRC_ALPHA\r\n        );\r\n        this._mainTech = new Technique(\r\n            ['transparent'],\r\n            [\r\n                { name: 'texture', type: renderer.PARAM_TEXTURE_2D },\r\n                { name: 'color', type: renderer.PARAM_COLOR4 },\r\n            ]\r\n            , [this._pass]);\r\n        this._effect = new Effect(\r\n            [this._mainTech],\r\n            { 'color': this._color }\r\n            , []\r\n        );\r\n    }\r\n\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set color(v) {\r\n        this._color = v;\r\n        this._effect.setProperty('color',v);\r\n    }\r\n\r\n    get texture() {\r\n        return this._texture;\r\n    }\r\n    set texture(val) {\r\n        if (this._texture !== val) {\r\n            this._texture = val;\r\n            this._effect.setProperty('texture', val.getImpl());\r\n            this._texIds['texture'] = val.getId();\r\n        }\r\n    }\r\n    clone() {\r\n        var copy = new ShaderMaterial(this._passName);\r\n        copy.color = this.color;\r\n        copy.updateHash();\r\n        return copy;\r\n    }\r\n\r\n}"]}